res = est.completion(A)
image(A)
image(res)
library(graphon)
remove.packages("Lahman", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("ROptSpace", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("ROptSpace")
install.packages("ROptSpace")
W = gmodel.preset(3,id=5)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r2 = est.completion(A,rank=2)       # use rank 2 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
library(graphon)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=5)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r2 = est.completion(A,rank=2)       # use rank 2 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
res_r2 = est.completion(A,rank=2)       # use rank 2 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r1 = est.completion(A,rank=1)       # use rank 1 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
@references Keshavan, R.H., Montanari, A., and Oh, S. (2009) \emph{Matrix Completion
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r1 = est.completion(A,rank=1)       # use rank 1 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
res_r3 = est.completion(A,rank=3)       # use rank 1 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
x11()
mfrow(par=c(1,3))
image(res_r3); title("rank 3")
image(res_r5); title("rank 5")
image(res_rN); title("guessed rank")
x11()
par(mfrow=c(1,3))
image(res_r3); title("rank 3")
image(res_r5); title("rank 5")
image(res_rN); title("guessed rank")
res_r3 = est.completion(A,rank=3)       # use rank-3 approximation
res_r9 = est.completion(A,rank=9)       # use rank-9 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
## visualize
x11()
par(mfrow=c(1,3))
image(res_r3); title("rank 3")
image(res_r5); title("rank 5")
image(res_rN); title("guessed rank")
library(graphon)
?est.completion
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
remove.packages("ROptSpace", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("ROptSpace")
install.packages("ROptSpace")
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
help(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
help(gmodel.ER)
W = matrix(c(0.9,0.2,0.2,0.7),nr=2)
n = 200
## generate 2 observations without self-loops.
out <- gmodel.block(W,n,rep=2,noloop=TRUE)
## Visualize generated graphs
par(mfrow=c(1,2))
image(out$G[[1]]); title("Observation 1")
image(out$G[[2]]); title("Observation 2")
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
usethis::use_news_md()
library(graphon)
usethis::use_mit_license()
## set inputs
modelP <- matrix(runif(16),nrow=4)
## generate 3 observations without self-loops.
out <- gmodel.P(modelP,rep=3,noloop=TRUE)
## visualize generated graphs
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(out[[1]])
image(out[[2]])
image(out[[3]])
par(opar)
## set inputs
modelP <- matrix(runif(16),nrow=4)
## generate 3 observations without self-loops.
out <- gmodel.P(modelP,rep=3,noloop=TRUE)
## visualize generated graphs
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(out[[1]], main="1st sample")
image(out[[2]], main="2nd sample")
image(out[[3]], main="3rd sample")
par(opar)
## generate 3 graphs with a global with probability 0.5
graph3 = gmodel.ER(100,par=0.5,rep=3)
## visualize
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(graph3[[1]], main="1st sample")
image(graph3[[2]], main="2nd sample")
image(graph3[[3]], main="3rd sample")
par(opar)
## Generate 3 random graphons of nodal size 100.
n  = 100
r3 = (sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
W2 = gmodel.preset(n,id=r3[2])
W3 = gmodel.preset(n,id=r3[3])
## Generate corresponding observations and plot them
A1 = gmodel.P(W1)
A2 = gmodel.P(W2)
A3 = gmodel.P(W3)
## Generate 3 random graphons of nodal size 100.
n  = 100
r3 = (sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
W2 = gmodel.preset(n,id=r3[2])
W3 = gmodel.preset(n,id=r3[3])
## Generate corresponding observations and plot them
A1 = gmodel.P(W1)
A2 = gmodel.P(W2)
A3 = gmodel.P(W3)
for (i in 1:10){
W = gmodel.preset(100,id=i)
}
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
## generate a graphon of type No.1 with 3 clusters
W = gmodel.preset(3,id=1)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 5 observations from a given probability matrix
A = gmodel.P(P,rep=5,symmetric.out=TRUE)
## run USVT algorithm with different eta values (0.01,0.1)
res2 = est.USVT(A,eta=0.01)
res3 = est.USVT(A,eta=0.1)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(P,      main="original P matrix")
image(res2$P, main="USVT with eta=0.01")
image(res3$P, main="USVT with eta = 0.1")
par(opar)
## generate a graphon of type No.6 with 3 clusters
W = gmodel.preset(3,id=6)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 17 observations from a given probability matrix
A = gmodel.P(P,rep=17)
## run SBA algorithm with different deltas (0.2,0.5,0.8)
res2 = est.SBA(A,delta=0.2)
res3 = est.SBA(A,delta=0.5)
res4 = est.SBA(A,delta=0.8)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(P); title("original P")
image(res2$P); title("SBA with delta=0.2")
image(res3$P); title("SBA with delta=0.5")
image(res4$P); title("SBA with delta=0.8")
par(opar)
## set inputs
W = matrix(c(0.9,0.2,0.2,0.7),nr=2)
n = 200
## generate 2 observations without self-loops.
out <- gmodel.block(W,n,rep=2,noloop=TRUE)
## visualize generated graphs
opar = par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(out$G[[1]]); title("Observation 1")
image(out$G[[2]]); title("Observation 2")
par(opar)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=5)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r3 = est.completion(A,rank=3)       # use rank-3 approximation
res_r9 = est.completion(A,rank=9)       # use rank-9 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
## visualize
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(res_r3, main="rank 3")
image(res_r9, main="rank 9")
image(res_rN, main="rank is guessed")
par(opar)
## generate a graphon of type No.4 with 3 clusters
W = gmodel.preset(3,id=4)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 5 observations from a given probability matrix
A = gmodel.P(P,rep=5,symmetric.out=TRUE)
## run nbdsmooth algorithm
res2 = est.nbdsmooth(A)
## compare true probability matrix and estimated ones
opar = par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="nbdsmooth estimated P")
par(opar)
library(graphon)
library(graphon)
